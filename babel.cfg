# This file defines config environment for Flask-Babel translation. 

# Obtain .pot file, a text file that includes all texts marked for translation. This serves as a template to create translation files for each language.
# Command: 
#     pybabel extract -F babel.cfg -k _l -o messages.pot .

#     pybabel extract: scan all code and template files that match config
#     -F : specify config file
#     -k : specify extra text markers, _() included by default
#     -o : name of output file, add to .gitignore
#     .  : directory to scan from

# Next, generate a language catalog for each supported language.
# Command:
#     pybabel init -i messages.pot -d app/translations -l es

#     pybabel init: takes messages.pot to make new catalog
#     -d : output destintation, app/translations is the default for Flask-Babel
#     -l : languages to make

# Finally, the message.po file needs to be compiled for use by the application
# at runtime.
# Command: 
#     pybabel compile -d app/translations

# To make updates, to add more _() or _l() wrappers, do the following:
#     pybabel extract -F babel.cfg -k _l -o messages.pot .
#     pybabel update -i messages.pot -d app/translations

# Define filename pattern for Python
[python: app/**.py]
# Define filename pattern for Jinja2 template
[jinja2: app/templates/**.html]
# Define two extensions provided Jinja2 engine to help Babel parse 
# template files
extensions=jinja2.ext.autoescape,jinja2.ext.with_

